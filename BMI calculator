import tkinter as tk
from tkinter import messagebox
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

class BMICalculator:
    def __init__(self, root):
        self.root = root
        self.root.title("BMI Calculator")

        self.weight_label = tk.Label(root, text="Weight (kg):")
        self.weight_entry = tk.Entry(root)

        self.height_label = tk.Label(root, text="Height (m):")
        self.height_entry = tk.Entry(root)

        self.calculate_button = tk.Button(root, text="Calculate BMI", command=self.calculate_bmi)
        self.plot_button = tk.Button(root, text="Plot BMI History", command=self.plot_bmi_history)

        self.weight_label.pack()
        self.weight_entry.pack()

        self.height_label.pack()
        self.height_entry.pack()

        self.calculate_button.pack()
        self.plot_button.pack()

        # Initialize data storage
        self.users_data = []

    def calculate_bmi(self):
        try:
            weight = float(self.weight_entry.get())
            height = float(self.height_entry.get())

            if weight <= 0 or height <= 0:
                messagebox.showerror("Error", "Weight and height must be positive values.")
                return

            bmi = weight / (height ** 2)

            # Classify BMI category
            if bmi < 18.5:
                category = "Underweight"
            elif 18.5 <= bmi < 24.9:
                category = "Normal weight"
            elif 25 <= bmi < 29.9:
                category = "Overweight"
            else:
                category = "Obese"

            messagebox.showinfo("BMI Result", f"Your BMI is: {bmi:.2f}\nCategory: {category}")

            # Store user data
            self.users_data.append({"Weight": weight, "Height": height, "BMI": bmi, "Category": category})

        except ValueError:
            messagebox.showerror("Error", "Invalid input. Please enter valid numeric values.")

    def plot_bmi_history(self):
        if not self.users_data:
            messagebox.showinfo("BMI History", "No data available for plotting.")
            return

        weights = [entry["Weight"] for entry in self.users_data]
        heights = [entry["Height"] for entry in self.users_data]
        bmis = [entry["BMI"] for entry in self.users_data]

        fig, axs = plt.subplots(2, 1, figsize=(8, 6))

        axs[0].plot(weights, label="Weight (kg)", marker='o')
        axs[0].plot(heights, label="Height (m)", marker='o')
        axs[0].set_ylabel("Value")
        axs[0].legend()

        axs[1].plot(bmis, label="BMI", marker='o', color='r')
        axs[1].set_xlabel("User")
        axs[1].set_ylabel("BMI")
        axs[1].legend()

        plt.tight_layout()

        # Embed the plot in the Tkinter window
        canvas = FigureCanvasTkAgg(fig, master=self.root)
        canvas_widget = canvas.get_tk_widget()
        canvas_widget.pack()

if __name__ == "__main__":
    root = tk.Tk()
    app = BMICalculator(root)
    root.mainloop()
